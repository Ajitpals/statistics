
Sub ClearAndRefreshPivotTablesWithoutOverlap()
    Dim ws As Worksheet
    Dim pt As PivotTable
    Dim pc As PivotCache
    Dim wb As Workbook
    Dim lastRow As Long, lastCol As Long

    ' Set the workbook
    Set wb = ThisWorkbook

    ' Loop through all worksheets
    For Each ws In wb.Worksheets
        ' Loop through each PivotTable in the worksheet
        For Each pt In ws.PivotTables
            ' Identify the last cell of the Pivot Table
            lastRow = pt.TableRange2.Row + pt.TableRange2.Rows.Count
            lastCol = pt.TableRange2.Column + pt.TableRange2.Columns.Count

            ' Clear the cache by recreating the PivotTable
            Set pc = wb.PivotCaches.Create(SourceType:=pt.SourceType, SourceData:=pt.SourceData)
            pt.ChangePivotCache pc

            ' Move the Pivot Table if needed to avoid overlaps
            If Not IsEmpty(ws.Cells(lastRow, lastCol)) Then
                pt.TableRange2.Clear ' Optional: Clears old data
                pt.TableRange2.Offset(5, 0).Select
            End If
        Next pt
    Next ws

`````. Elabor .** Notes Clearing-Auto



let
    Source = (continuationToken as nullable text, organization as text, project as text) as any =>
    let
        Url = "https://dev.azure.com/" & organization & "/" & project & "/_apis/build/definitions?api-version=7.1-preview.7" & if continuationToken <> null then "&continuationToken=" & continuationToken else "",
        WebCall = Json.Document(Web.Contents(Url)),
        NextContinuationToken = try WebCall[continuationToken] otherwise null,
        Data = WebCall[value],
        Output = if NextContinuationToken <> null then Data & Source(NextContinuationToken, organization, project) else Data
    in
        Output,
    FinalData = Source(null, "yourOrganization", "yourProject")
in
    FinalData

========≠=======≠≈===={({===

import requests
import json

class AzureDevOpsConnector:
    def __init__(self, org_url, pat):
        self.org_url = org_url
        self.pat = pat

    def execute_wiql_query(self, query):
        headers = {
            "Content-Type": "application/json",
            "Authorization": "Basic " + self.pat
        }

        data = {
            "query": query
        }

        response = requests.post(
            self.org_url + "/_apis/wit/wiql",
            headers=headers,
            json=data
        )

        if response.status_code == 200:
            results = json.loads(response.text)
            work_items = results["work_items"]

            return work_items
        else:
            raise ValueError(
                "Failed to execute WIQL query: {} ({})".format(
                    response.status_code, response.text
                )
            )

connector = AzureDevOpsConnector("https://dev.azure.com/myorg", "mypat")
work_items = connector.execute_wiql_query("SELECT [System.Id], [System.Title], [System.WorkItemType] FROM workitems")

https://<your_instance_url>/sys_change_request.do?JSONv2&sysparm_query=&sysparm_fields=<selected_fields>

https://<your_instance_url>/sys_change_request.do?JSONv2&sysparm_query=&sysparm_fields=<selected_fields>&sysparm_limit=100



for work_item in work_items:
    print(work_item["id"], work_item["title"], work_item["work_item_type"])
