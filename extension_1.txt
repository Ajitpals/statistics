using System;
using System.IO;
using System.Linq;
using ClosedXML.Excel;
using System.Text.RegularExpressions;

class Program
{
    static void Main()
    {
        string filePath = "Templates.xlsx"; // Adjust as needed

        using var workbook = new XLWorkbook(filePath);

        foreach (var sheet in workbook.Worksheets)
        {
            Console.WriteLine($"--- Sheet: {sheet.Name} ---");

            var range = sheet.RangeUsed();
            if (range == null) continue;

            // Identify all 4-digit cells
            var fourDigitCells = range.CellsUsed()
                .Where(c => Regex.IsMatch(c.GetString(), @"^\d{4}$"))
                .ToList();

            if (!fourDigitCells.Any()) continue;

            int minRow = fourDigitCells.Min(c => c.Address.RowNumber);
            int maxRow = fourDigitCells.Max(c => c.Address.RowNumber);
            int minCol = fourDigitCells.Min(c => c.Address.ColumnNumber);
            int maxCol = fourDigitCells.Max(c => c.Address.ColumnNumber);

            var rowCodes = sheet.Range(minRow + 1, minCol, maxRow, minCol)
                .Cells()
                .Where(c => Regex.IsMatch(c.GetString(), @"^\d{4}$"))
                .ToList();

            var colCodes = sheet.Range(minRow, minCol + 1, minRow, maxCol)
                .Cells()
                .Where(c => Regex.IsMatch(c.GetString(), @"^\d{4}$"))
                .ToList();

            foreach (var rowCell in rowCodes)
            {
                string rowCode = rowCell.GetString();
                int row = rowCell.Address.RowNumber;

                foreach (var colCell in colCodes)
                {
                    string colCode = colCell.GetString();
                    int col = colCell.Address.ColumnNumber;

                    var dataCell = sheet.Cell(row, col);
                    string color = GetCellColor(dataCell);

                    // Extract main property just outside range
                    string mainProperty = sheet.Cell(minRow - 1, col).GetString(); // Above column
                    if (string.IsNullOrWhiteSpace(mainProperty))
                        mainProperty = sheet.Cell(row, minCol - 1).GetString(); // Left of row

                    Console.WriteLine($"Row: {rowCode}, Column: {colCode}, Main Property: {mainProperty}, Color: {color}");
                }
            }

            Console.WriteLine();
        }
    }

    static string GetCellColor(IXLCell cell)
    {
        var color = cell.Style.Fill.BackgroundColor;
        if (color.ColorType == XLColorType.Color)
        {
            return color.Color.ToArgb() == XLColor.White.Color.ToArgb() ? "White" : "Grey";
        }
        return "White";
    }
}
